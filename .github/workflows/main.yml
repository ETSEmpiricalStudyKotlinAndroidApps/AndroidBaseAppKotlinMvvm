# Workflow name
name: Android CI
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# Where will they run
jobs:
  build:
    runs-on: macos-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up our JDK environment
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Write properties
      env:
        MOVIE_API_KEY: ${{ secrets.MOVIE_API_KEY }}
        SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
        SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
        SIGNING_STORE_FILE: ${{ secrets.SIGNING_STORE_FILE }}
        SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
      run: |
        echo "movie.api.key=$MOVIE_API_KEY" >> local.properties
        echo "signing.key.alias=$SIGNING_KEY_ALIAS" >> local.properties
        echo "signing.key.password=$SIGNING_KEY_PASSWORD" >> local.properties
        echo "signing.store.file=$SIGNING_STORE_FILE" >> local.properties
        echo "signing.store.password=$SIGNING_STORE_PASSWORD" >> local.properties

    - name: Setup Android SDK
      uses: android-actions/setup-android@v2

    - name: Run Detekt
      run: ./gradlew detekt

    - name: Run Kotlin Lint
      run: ./gradlew ktlint

    - name: Run Android Lint
      run: ./gradlew lintDevDebug

    - name: Run Spotless
      run: ./gradlew spotlessKotlinCheck

    - name: Run Unit Tests
      run: ./gradlew testDevDebugUnitTest

    - name: Run Instrumented tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 29
        script: ./gradlew combinedTestReportDevDebug

    - name: Run CodeCov
      uses: codecov/codecov-action@v1

    - name: Create universal release APK
      run: ./gradlew packageProdReleaseUniversalApk

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: Release artifact
        path: app/build/outputs/universal_apk/prodRelease/app-prod-release-universal.apk

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

    - name: Save name of our Artifact
      id: set-result-artifact
      run: |
        ARTIFACT_PATHNAME_APK=$(ls app/build/outputs/apk/universal_apk/prodRelease/*.apk | head -n 1)
        ARTIFACT_NAME_APK=$(basename $ARTIFACT_PATHNAME_APK)
        echo "ARTIFACT_NAME_APK is " ${ARTIFACT_NAME_APK}
        echo "ARTIFACT_PATHNAME_APK=${ARTIFACT_PATHNAME_APK}" >> $GITHUB_ENV
        echo "ARTIFACT_NAME_APK=${ARTIFACT_NAME_APK}" >> $GITHUB_ENV

    - name: Upload our Artifact Assets
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARTIFACT_PATHNAME_APK }}
          asset_name: ${{ env.ARTIFACT_NAME_APK }}
          asset_content_type: application/zip